1 创建命令
  1创建新的工程
    keystone --debug tenant-create --name mytest --enabled true
  1创建新用户
    keystone --debug user-create --name myuser --pass Galax8800
  2让新用户在新工程中具有特定权限
  keystone --debug user-role-add --user myuser --role Member --tenant mytest （赋一般权限）
   keystone --debug user-role-add --user myuser --role admin --tenant mytest（赋管理员权限）
   
2 novarc 文件内容
   export OS_USERNAME=myuser
   export OS_PASSWORD=Galax8800
   export OS_TENANT_NAME=mytest
   export OS_AUTH_URL="http://10.175.28.133:5000/v2.0/"

glance 和网络相关命令
  glance --debug image-create --name myImage --disk-format qcow2 --container-format bare --file /home/cirros-0.3.1-x86_64-disk.img
创建网络和子网的命令如下：
neutron net-create new-net
neutron subnet-create new-net 10.10.10.0/24
创建规格
nova --debug flavor-create myflavor 6 256 2 1
创建虚拟机
nova --debug boot --image 42a634e0-db5e-403f-9489-e11ed900913e --flavor 6 --nic net-id=cd759e47-5467-47db-b08d-5f157977dff4 myTestVm
再通过“nova --debug get-vnc-console myTestVm novnc”可以获取到一个登录到虚拟机内部的url连接。
  该url是用html5实现的，它对浏览器的客户端有要求。通过firefox或者谷歌浏览器访问该连接，就可以登录到虚拟机的内部。
  
  
  
  openstack中,服务内组件的调用是通过rpc完成的，服务间的调用时通过client方式完成的
  
  
nova代码调试
（1）以调试的方式重启Nova的4个核心服务
看代码最方便的就是在debug模式下，一行行看代码怎么运行的。所以这里需要先进入python的调试模式。步骤如下：
  <1> 停止nova的4个核心进程
      service openstack-nova-api stop
      service openstack-nova-compute stop
      service openstack-nova-conductor stop
      service openstack-nova-scheduler stop
  <2> 以debug方式重启nova的4个核心进程
  
     <2.1> 启动nova-api服务，并在create函数打断点。
          先查看/opt/stack/nova/nova/api/openstack/compute/servers.py 中 def create位于第几行。在我的环境中位于767行。
         先进入debug模式
         python -m pdb /usr/local/bin/nova-api --config-file /etc/nova/nova.conf
         然后打断点（需要打到函数体部分，所以是767+2＝769）
         b /opt/stack/nova/nova/api/openstack/compute/servers.py:769
         之后启动进程
          r
        这样nova-api就以debug模式启动了。
        
  创建虚拟机的函数调用关系：
  [nova-api]
   nova/api/openstack/compute/servers.py: create （创建虚拟机）
    nova/compute/api.py: create
        nova/compute/api.py: _create_instance
            nova/compute/api.py: _validate_and_build_base_options （验证基本输入参数，并拷贝flavor信息）
            nova/compute/api.py: _check_and_transform_bdm （检查块设备）
            nova/compute/api.py: _provision_instances （查看配额quota是否满足）
            nova/compute/api.py: _build_filter_properties （获取主机过滤条件）
            nova/compute/api.py: _record_action_start （更新数据库，记录创建开始信息）
            nova/conductor/api.py: build_instances （使用rpc调用 nova-conductor的manager的同名函数）
                nova/conductor/rpcapi.py: build_instances
[nova-conductor]
nova/conductor/manager.py: build_instances
    build_request_spec
    nova/scheduler/rpcapi.py:run_instance
[nova-scheduler]
  nova/scheduler/manager.py:run_instance
  
  
  <3> nova-compute调用libvirt接口创建虚拟机
nova-compute是真正拿用户输入的参数创建虚拟机的组件。它之后的代码流程如下：
[nova-compute]
nova/compute/manager.py:run_instance
    nova/compute/manager.py:_run_instance
        nova/compute/manager.py:_prebuild_instance
            nova/compute/manager.py:_get_image_meta （通过glance client的接口，获取具体的镜像文件）
            nova/image/glance.py: get_remote_image_service
        nova/compute/manager.py:_build_instance
            nova/virt/libvirt/driver.py:get_available_nodes
            nova/virt/libvirt/driver.py:dhcp_options_for_instance
            nova/compute/manager.py:_allocate_network (通过neutron client的接口，为虚拟机分配网卡)
            nova/network/neutronv2/api.py:allocate_for_instance
            nova/compute/manager.py:_prep_block_device （为虚拟机分配块设备）
            nova/compute/manager.py:_spawn
                nova/virt/libvirt/driver.py:spawn （真正创建虚拟机）
                    nova/virt/libvirt/driver.py:_create_image
                    nova/virt/libvirt/driver.py:to_xml
                    nova/virt/libvirt/driver.py:_create_domain_and_network
                    nova/virt/libvirt/driver.py: _create_domain
                    nova/virt/libvirt/driver.py:_wait_for_boot
                    
4使用调用栈
当你确定某个问题一定会调用某个函数，但是不知道谁会调用它。这个时候，可以在你确定会调用的函数里面将调用栈输出到日志里面。具体做法如下：
import inspect
stackinfo = str(inspect.stack()).replace("(<frame", "\n(<frame") 
LOG.debug("---------\n" + stackinfo)
当你要看一段新的代码，而你有不确定它是怎么调用各个子函数的时候；或者当你要定位一个并非调用的问题的时候，这个方法非常有用。


5 迁移虚拟机
  迁移指的是在Host间用冷迁移或热迁移的方式，移动虚拟机。移动虚拟机会涉及到镜像文件的拷贝，所以需要在两个Host之间，配置一下互信，
  以避免拷贝文件失败。
  设置互信方法如下：
     cd /root
     ssh-keygen -t rsa  (连续三次回车,即在本地生成了公钥和私钥,不设置密码)
     touch /root/.ssh/authorized_keys
     cat /root/.ssh/id_rsa.pub >> /root/.ssh/authorized_keys
     scp -r .ssh root@10.175.28.135:/root
这样就可以设置本机和10.175.28.135之间ssh是免登录的。如果要设置多台机器，那么就用scp拷贝文件夹到多台不同的机器。
因为迁移的目的节点是使用机器名来描述的，所以还需要配置对机器名的解析。这有2种办法，第一种是使用DNS服务器，
第二种是直接在 /etc/hosts 中配置各个节点的“机器名”和“IP”，如下：
127.0.0.1       localhost openstack
10.175.28.133   openstack
10.175.28.135   openstack2
10.175.28.136   openstack3
现在就可以操作进行迁移了。操作可以直接使用REST API来完成，也可以使用nova client的命令行封装curl发送REST消息来完成。
这里使用nova client来操作。

冷迁移过程中，如果一直ping虚拟机，会发现ping在某个时间段内会断开。冷迁移实际上分为2步：
第一步在新的host上创建一个同样规格的虚拟机，此时旧的host上原虚拟机还保留着。
第二步是要操作人员手动确认是否迁移，可以确认迁移，也可以回滚。用nova命令表示的迁移步骤如下：
nova --debug migration f49d3d39-b3f1-43de-bafb-70da5c34426a 
等待1分钟
nova list
等待1分钟
nova --debug resize-confirm f49d3d39-b3f1-43de-bafb-70da5c34426a
热迁移需要指定迁移的目的节点。热迁移的过程中，ping虚拟机是不会断开的。
nova --debug live-migration --block-migrate f49d3d39-b3f1-43de-bafb-70da5c34426a newhost



如何使用PDB调试Python(以调试Openstack的libvirtDriver为例子)  
（1） 硬编码调试
比方我要调试的是nova/virt/libvirt/driver.py，则再刚开始的地方加入：
import pdb
       在需要调试的函数处，加上一句话：
pdb.set_trace()
       然后杀掉原来的进程，如nova-compute，手工启动脚本nova-compute
rm nova/virt/libvirt/driver.pyc
rm nova/virt/libvirt/driver.pyo
/usr/bin/nova-compute --config-file=/etc/nova/nova.conf
#或者为 python /usr/bin/nova-compute --config-file=/etc/nova/nova.conf
       这样当程序进入pdb.set_trace()所在的行时，则会自动中断等待调试，
  （2）
  
  不用修改代码的调试
直接调用 –m pdb，就可以进入调试状态，使用方法如下：
rm nova/virt/libvirt/driver.pyc
rm nova/virt/libvirt/driver.pyo
python –m pdb /usr/bin/nova-compute --config-file=/etc/nova/nova.conf
       会出现如下的界面，在(pdb)的界面中输入断点，然后按c继续，就可以等待最后断在断点处了。
> /usr/bin/nova-compute(20)<module>()
-> """Starter script for Nova Compute."""
(Pdb) b nova/virt/libvirt/driver.py:1504
Breakpoint 1 at /usr/lib64/python2.6/site-packages/nova/virt/libvirt/driver.py:1504
(Pdb) c
       断点如下：
> /usr/lib64/python2.6/site-packages/nova/virt/libvirt/driver.py(1504)spawn()
-> disk_info = blockinfo.get_disk_info(CONF.libvirt_type,
(Pdb) p instance['name']
u'instance-0000001a'
(Pdb) p instance
##该值请见附录
       注意：不知道为啥断点经常就直接过去了，不会断在我想要的地方，于是我在前面加一个断点，后面加一个断点，一般就会断了，也许是由于行号不对的原因吧。这个大家以后再一起讨论下。





  
  


  
  
  
  
  
  
  
  



